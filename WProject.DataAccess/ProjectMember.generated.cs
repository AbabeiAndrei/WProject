#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using WProject.DataAccess;

namespace WProject.DataAccess	
{
	[Table("project_member")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class ProjectMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		private int _id;
		[Column("id", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_id")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual int Id
		{
			get
			{
				return this._id;
			}
			set
			{
				if(this._id != value)
				{
					this.OnPropertyChanging("Id");
					this._id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}
		
		private int _userId;
		[Column("user_id", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_userId")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int UserId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if(this._userId != value)
				{
					this.OnPropertyChanging("UserId");
					this._userId = value;
					this.OnPropertyChanged("UserId");
				}
			}
		}
		
		private int _projectId;
		[Column("project_id", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_projectId")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int ProjectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if(this._projectId != value)
				{
					this.OnPropertyChanging("ProjectId");
					this._projectId = value;
					this.OnPropertyChanged("ProjectId");
				}
			}
		}
		
		private int? _assignedBy;
		[Column("assigned_by", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_assignedBy")]
		public virtual int? AssignedBy
		{
			get
			{
				return this._assignedBy;
			}
			set
			{
				if(this._assignedBy != value)
				{
					this.OnPropertyChanging("AssignedBy");
					this._assignedBy = value;
					this.OnPropertyChanged("AssignedBy");
				}
			}
		}
		
		private DateTime? _assignedAt;
		[Column("assigned_at", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_assignedAt")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? AssignedAt
		{
			get
			{
				return this._assignedAt;
			}
			set
			{
				if(this._assignedAt != value)
				{
					this.OnPropertyChanging("AssignedAt");
					this._assignedAt = value;
					this.OnPropertyChanged("AssignedAt");
				}
			}
		}
		
		private DateTime? _expire;
		[Column("expire", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_expire")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? Expire
		{
			get
			{
				return this._expire;
			}
			set
			{
				if(this._expire != value)
				{
					this.OnPropertyChanging("Expire");
					this._expire = value;
					this.OnPropertyChanged("Expire");
				}
			}
		}
		
		private string _metadata;
		[Column("metadata", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_metadata")]
		public virtual string Metadata
		{
			get
			{
				return this._metadata;
			}
			set
			{
				if(this._metadata != value)
				{
					this.OnPropertyChanging("Metadata");
					this._metadata = value;
					this.OnPropertyChanged("Metadata");
				}
			}
		}
		
		private string _notes;
		[Column("notes", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_notes")]
		public virtual string Notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if(this._notes != value)
				{
					this.OnPropertyChanging("Notes");
					this._notes = value;
					this.OnPropertyChanged("Notes");
				}
			}
		}
		
		private short? _deleted;
		[Column("deleted", OpenAccessType = OpenAccessType.Byte, IsNullable = true, Length = 0, Scale = 0, SqlType = "tinyint")]
		[Storage("_deleted")]
		public virtual short? Deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if(this._deleted != value)
				{
					this.OnPropertyChanging("Deleted");
					this._deleted = value;
					this.OnPropertyChanged("Deleted");
				}
			}
		}
		
		private User _user;
		[ForeignKeyAssociation(ConstraintName = "project_member_user_fk", SharedFields = "UserId", TargetFields = "Id")]
		[Storage("_user")]
		public virtual User User
		{
			get
			{
				return this._user;
			}
			set
			{
				if(this._user != value)
				{
					this.OnPropertyChanging("User");
					this._user = value;
					this.OnPropertyChanged("User");
				}
			}
		}
		
		private Project _project;
		[ForeignKeyAssociation(ConstraintName = "project_member_project", SharedFields = "ProjectId", TargetFields = "Id")]
		[Storage("_project")]
		public virtual Project Project
		{
			get
			{
				return this._project;
			}
			set
			{
				if(this._project != value)
				{
					this.OnPropertyChanging("Project");
					this._project = value;
					this.OnPropertyChanged("Project");
				}
			}
		}
		
		private User _user1;
		[ForeignKeyAssociation(ConstraintName = "project_member_assigned", SharedFields = "AssignedBy", TargetFields = "Id")]
		[Storage("_user1")]
		public virtual User Asigned
		{
			get
			{
				return this._user1;
			}
			set
			{
				if(this._user1 != value)
				{
					this.OnPropertyChanging("Asigned");
					this._user1 = value;
					this.OnPropertyChanged("Asigned");
				}
			}
		}
		
		#region INotifyPropertyChanging members
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanging(string propertyName)
		{
			if(this.PropertyChanging != null)
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
