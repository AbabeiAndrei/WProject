#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using WProject.DataAccess;

namespace WProject.DataAccess	
{
	[Table("user")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		private int _id;
		[Column("id", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_id")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual int Id
		{
			get
			{
				return this._id;
			}
			set
			{
				if(this._id != value)
				{
					this.OnPropertyChanging("Id");
					this._id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}
		
		private string _name;
		[Column("name", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 128, Scale = 0, SqlType = "nvarchar")]
		[Storage("_name")]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this.OnPropertyChanging("Name");
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private string _email;
		[Column("email", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 128, Scale = 0, SqlType = "nvarchar")]
		[Storage("_email")]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public virtual string Email
		{
			get
			{
				return this._email;
			}
			set
			{
				if(this._email != value)
				{
					this.OnPropertyChanging("Email");
					this._email = value;
					this.OnPropertyChanged("Email");
				}
			}
		}
		
		private string _login;
		[Column("login", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 128, Scale = 0, SqlType = "nvarchar")]
		[Storage("_login")]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Login
		{
			get
			{
				return this._login;
			}
			set
			{
				if(this._login != value)
				{
					this.OnPropertyChanging("Login");
					this._login = value;
					this.OnPropertyChanged("Login");
				}
			}
		}
		
		private string _word;
		[Column("word", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 512, Scale = 0, SqlType = "nvarchar")]
		[Storage("_word")]
		[System.ComponentModel.DataAnnotations.StringLength(512)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Word
		{
			get
			{
				return this._word;
			}
			set
			{
				if(this._word != value)
				{
					this.OnPropertyChanging("Word");
					this._word = value;
					this.OnPropertyChanged("Word");
				}
			}
		}
		
		private DateTime? _expire;
		[Column("expire", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_expire")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? Expire
		{
			get
			{
				return this._expire;
			}
			set
			{
				if(this._expire != value)
				{
					this.OnPropertyChanging("Expire");
					this._expire = value;
					this.OnPropertyChanged("Expire");
				}
			}
		}
		
		private short? _su;
		[Column("su", OpenAccessType = OpenAccessType.Byte, IsNullable = true, Length = 0, Scale = 0, SqlType = "tinyint")]
		[Storage("_su")]
		public virtual short? Su
		{
			get
			{
				return this._su;
			}
			set
			{
				if(this._su != value)
				{
					this.OnPropertyChanging("Su");
					this._su = value;
					this.OnPropertyChanged("Su");
				}
			}
		}
		
		private short? _suspended;
		[Column("suspended", OpenAccessType = OpenAccessType.Byte, IsNullable = true, Length = 0, Scale = 0, SqlType = "tinyint")]
		[Storage("_suspended")]
		public virtual short? Suspended
		{
			get
			{
				return this._suspended;
			}
			set
			{
				if(this._suspended != value)
				{
					this.OnPropertyChanging("Suspended");
					this._suspended = value;
					this.OnPropertyChanged("Suspended");
				}
			}
		}
		
		private short? _deleted;
		[Column("deleted", OpenAccessType = OpenAccessType.Byte, IsNullable = true, Length = 0, Scale = 0, SqlType = "tinyint")]
		[Storage("_deleted")]
		public virtual short? Deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if(this._deleted != value)
				{
					this.OnPropertyChanging("Deleted");
					this._deleted = value;
					this.OnPropertyChanged("Deleted");
				}
			}
		}
		
		private string _metadata;
		[Column("metadata", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_metadata")]
		public virtual string Metadata
		{
			get
			{
				return this._metadata;
			}
			set
			{
				if(this._metadata != value)
				{
					this.OnPropertyChanging("Metadata");
					this._metadata = value;
					this.OnPropertyChanged("Metadata");
				}
			}
		}
		
		private IList<UserInGroup> _userInGroups = new List<UserInGroup>();
		[Collection(InverseProperty = "AddedBy")]
		[Storage("_userInGroups")]
		public virtual IList<UserInGroup> UserInGroups
		{
			get
			{
				return this._userInGroups;
			}
		}
		
		private IList<UserInGroup> _userInGroups1 = new List<UserInGroup>();
		[Collection(InverseProperty = "User")]
		[Storage("_userInGroups1")]
		public virtual IList<UserInGroup> UserInGroups1
		{
			get
			{
				return this._userInGroups1;
			}
		}
		
		private IList<TaskTag> _taskTags = new List<TaskTag>();
		[Collection(InverseProperty = "User")]
		[Storage("_taskTags")]
		public virtual IList<TaskTag> TaskTags
		{
			get
			{
				return this._taskTags;
			}
		}
		
		private IList<TaskHistory> _taskHistories = new List<TaskHistory>();
		[Collection(InverseProperty = "User")]
		[Storage("_taskHistories")]
		public virtual IList<TaskHistory> TaskHistories
		{
			get
			{
				return this._taskHistories;
			}
		}
		
		private IList<TaskDependency> _taskDependencies = new List<TaskDependency>();
		[Collection(InverseProperty = "CreatedBy")]
		[Storage("_taskDependencies")]
		public virtual IList<TaskDependency> TaskDependencies
		{
			get
			{
				return this._taskDependencies;
			}
		}
		
		private IList<TaskAttachement> _taskAttachements = new List<TaskAttachement>();
		[Collection(InverseProperty = "User")]
		[Storage("_taskAttachements")]
		public virtual IList<TaskAttachement> TaskAttachements
		{
			get
			{
				return this._taskAttachements;
			}
		}
		
		private IList<Task> _tasks = new List<Task>();
		[Collection(InverseProperty = "AssignedTo")]
		[Storage("_tasks")]
		public virtual IList<Task> Tasks
		{
			get
			{
				return this._tasks;
			}
		}
		
		private IList<Task> _tasks1 = new List<Task>();
		[Collection(InverseProperty = "CreatedBy")]
		[Storage("_tasks1")]
		public virtual IList<Task> Tasks1
		{
			get
			{
				return this._tasks1;
			}
		}
		
		private IList<Spring> _springs = new List<Spring>();
		[Collection(InverseProperty = "CreatedBy")]
		[Storage("_springs")]
		public virtual IList<Spring> Springs
		{
			get
			{
				return this._springs;
			}
		}
		
		private IList<Spring> _springs1 = new List<Spring>();
		[Collection(InverseProperty = "Owner")]
		[Storage("_springs1")]
		public virtual IList<Spring> Springs1
		{
			get
			{
				return this._springs1;
			}
		}
		
		private IList<ProjectSetting> _projectSettings = new List<ProjectSetting>();
		[Collection(InverseProperty = "User")]
		[Storage("_projectSettings")]
		public virtual IList<ProjectSetting> ProjectSettings
		{
			get
			{
				return this._projectSettings;
			}
		}
		
		private IList<Project> _projects = new List<Project>();
		[Collection(InverseProperty = "CreatedBy")]
		[Storage("_projects")]
		public virtual IList<Project> Projects
		{
			get
			{
				return this._projects;
			}
		}
		
		private IList<Project> _projects1 = new List<Project>();
		[Collection(InverseProperty = "Owner")]
		[Storage("_projects1")]
		public virtual IList<Project> Projects1
		{
			get
			{
				return this._projects1;
			}
		}
		
		private IList<Log> _logs = new List<Log>();
		[Collection(InverseProperty = "User")]
		[Storage("_logs")]
		public virtual IList<Log> Logs
		{
			get
			{
				return this._logs;
			}
		}
		
		private IList<Group> _groups = new List<Group>();
		[Collection(InverseProperty = "User")]
		[Storage("_groups")]
		public virtual IList<Group> Groups
		{
			get
			{
				return this._groups;
			}
		}
		
		private IList<File> _files = new List<File>();
		[Collection(InverseProperty = "User")]
		[Storage("_files")]
		public virtual IList<File> Files
		{
			get
			{
				return this._files;
			}
		}
		
		private IList<Category> _categories = new List<Category>();
		[Collection(InverseProperty = "CreatedBy")]
		[Storage("_categories")]
		public virtual IList<Category> Categories
		{
			get
			{
				return this._categories;
			}
		}
		
		private IList<Category> _categories1 = new List<Category>();
		[Collection(InverseProperty = "Owner")]
		[Storage("_categories1")]
		public virtual IList<Category> Categories1
		{
			get
			{
				return this._categories1;
			}
		}
		
		private IList<Backlog> _backlogs = new List<Backlog>();
		[Collection(InverseProperty = "AssignedTo")]
		[Storage("_backlogs")]
		public virtual IList<Backlog> Backlogs
		{
			get
			{
				return this._backlogs;
			}
		}
		
		private IList<Backlog> _backlogs1 = new List<Backlog>();
		[Collection(InverseProperty = "CreatedBy")]
		[Storage("_backlogs1")]
		public virtual IList<Backlog> Backlogs1
		{
			get
			{
				return this._backlogs1;
			}
		}
		
		private IList<AppSetting> _appSettings = new List<AppSetting>();
		[Collection(InverseProperty = "LastUpdatedBy")]
		[Storage("_appSettings")]
		public virtual IList<AppSetting> AppSettings
		{
			get
			{
				return this._appSettings;
			}
		}
		
		private IList<ActiveSession> _activeSessions = new List<ActiveSession>();
		[Collection(InverseProperty = "User")]
		[Storage("_activeSessions")]
		public virtual IList<ActiveSession> ActiveSessions
		{
			get
			{
				return this._activeSessions;
			}
		}
		
		private IList<Access> _accesses = new List<Access>();
		[Collection(InverseProperty = "AccessGrantedBy")]
		[Storage("_accesses")]
		public virtual IList<Access> Accesses
		{
			get
			{
				return this._accesses;
			}
		}
		
		private IList<Access> _accesses1 = new List<Access>();
		[Collection(InverseProperty = "User")]
		[Storage("_accesses1")]
		public virtual IList<Access> Accesses1
		{
			get
			{
				return this._accesses1;
			}
		}
		
		private IList<ProjectMember> _projectMembers = new List<ProjectMember>();
		[Collection(InverseProperty = "User")]
		[Storage("_projectMembers")]
		public virtual IList<ProjectMember> ProjectMembers
		{
			get
			{
				return this._projectMembers;
			}
		}
		
		private IList<ProjectMember> _projectMembers1 = new List<ProjectMember>();
		[Collection(InverseProperty = "Asigned")]
		[Storage("_projectMembers1")]
		public virtual IList<ProjectMember> ProjectMembers1
		{
			get
			{
				return this._projectMembers1;
			}
		}
		
		private IList<TaskDiscution> _taskDiscutions = new List<TaskDiscution>();
		[Collection(InverseProperty = "User")]
		[Storage("_taskDiscutions")]
		public virtual IList<TaskDiscution> TaskDiscutions
		{
			get
			{
				return this._taskDiscutions;
			}
		}
		
		private IList<TaskComment> _taskComments = new List<TaskComment>();
		[Collection(InverseProperty = "User")]
		[Storage("_taskComments")]
		public virtual IList<TaskComment> TaskComments
		{
			get
			{
				return this._taskComments;
			}
		}
		
		#region INotifyPropertyChanging members
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanging(string propertyName)
		{
			if(this.PropertyChanging != null)
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
