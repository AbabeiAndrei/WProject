#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using WProject.DataAccess;

namespace WProject.DataAccess	
{
	[Table("task_dependency")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class TaskDependency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		private int _id;
		[Column("id", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_id")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual int Id
		{
			get
			{
				return this._id;
			}
			set
			{
				if(this._id != value)
				{
					this.OnPropertyChanging("Id");
					this._id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}
		
		private int _taskId;
		[Column("task_id", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_taskId")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int TaskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if(this._taskId != value)
				{
					this.OnPropertyChanging("TaskId");
					this._taskId = value;
					this.OnPropertyChanged("TaskId");
				}
			}
		}
		
		private int _taskDependentId;
		[Column("task_dependent_id", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_taskDependentId")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int TaskDependentId
		{
			get
			{
				return this._taskDependentId;
			}
			set
			{
				if(this._taskDependentId != value)
				{
					this.OnPropertyChanging("TaskDependentId");
					this._taskDependentId = value;
					this.OnPropertyChanged("TaskDependentId");
				}
			}
		}
		
		private int? _dependentStateId;
		[Column("dependent_state_id", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_dependentStateId")]
		public virtual int? DependentStateId
		{
			get
			{
				return this._dependentStateId;
			}
			set
			{
				if(this._dependentStateId != value)
				{
					this.OnPropertyChanging("DependentStateId");
					this._dependentStateId = value;
					this.OnPropertyChanged("DependentStateId");
				}
			}
		}
		
		private int? _dependentStageId;
		[Column("dependent_stage_id", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_dependentStageId")]
		public virtual int? DependentStageId
		{
			get
			{
				return this._dependentStageId;
			}
			set
			{
				if(this._dependentStageId != value)
				{
					this.OnPropertyChanging("DependentStageId");
					this._dependentStageId = value;
					this.OnPropertyChanged("DependentStageId");
				}
			}
		}
		
		private int? _blockOnStateId;
		[Column("block_on_state_id", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_blockOnStateId")]
		public virtual int? BlockOnStateId
		{
			get
			{
				return this._blockOnStateId;
			}
			set
			{
				if(this._blockOnStateId != value)
				{
					this.OnPropertyChanging("BlockOnStateId");
					this._blockOnStateId = value;
					this.OnPropertyChanged("BlockOnStateId");
				}
			}
		}
		
		private int? _blockOnStageId;
		[Column("block_on_stage_id", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_blockOnStageId")]
		public virtual int? BlockOnStageId
		{
			get
			{
				return this._blockOnStageId;
			}
			set
			{
				if(this._blockOnStageId != value)
				{
					this.OnPropertyChanging("BlockOnStageId");
					this._blockOnStageId = value;
					this.OnPropertyChanged("BlockOnStageId");
				}
			}
		}
		
		private DateTime _createdAt;
		[Column("created_at", OpenAccessType = OpenAccessType.Date, Length = 0, Scale = 0, SqlType = "date")]
		[Storage("_createdAt")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Date)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime CreatedAt
		{
			get
			{
				return this._createdAt;
			}
			set
			{
				if(this._createdAt != value)
				{
					this.OnPropertyChanging("CreatedAt");
					this._createdAt = value;
					this.OnPropertyChanged("CreatedAt");
				}
			}
		}
		
		private int _createdById;
		[Column("created_by", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_createdById")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int CreatedById
		{
			get
			{
				return this._createdById;
			}
			set
			{
				if(this._createdById != value)
				{
					this.OnPropertyChanging("CreatedById");
					this._createdById = value;
					this.OnPropertyChanged("CreatedById");
				}
			}
		}
		
		private string _comments;
		[Column("comments", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_comments")]
		public virtual string Comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				if(this._comments != value)
				{
					this.OnPropertyChanging("Comments");
					this._comments = value;
					this.OnPropertyChanged("Comments");
				}
			}
		}
		
		private string _metadata;
		[Column("metadata", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_metadata")]
		public virtual string Metadata
		{
			get
			{
				return this._metadata;
			}
			set
			{
				if(this._metadata != value)
				{
					this.OnPropertyChanging("Metadata");
					this._metadata = value;
					this.OnPropertyChanged("Metadata");
				}
			}
		}
		
		private short? _deleted;
		[Column("deleted", OpenAccessType = OpenAccessType.Byte, IsNullable = true, Length = 0, Scale = 0, SqlType = "tinyint")]
		[Storage("_deleted")]
		public virtual short? Deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if(this._deleted != value)
				{
					this.OnPropertyChanging("Deleted");
					this._deleted = value;
					this.OnPropertyChanged("Deleted");
				}
			}
		}
		
		private DictItem _dictItem;
		[ForeignKeyAssociation(ConstraintName = "task_dependency_dict_item_FK_block_on_stage_id", SharedFields = "BlockOnStageId", TargetFields = "Id")]
		[Storage("_dictItem")]
		public virtual DictItem BlockOnStage
		{
			get
			{
				return this._dictItem;
			}
			set
			{
				if(this._dictItem != value)
				{
					this.OnPropertyChanging("BlockOnStage");
					this._dictItem = value;
					this.OnPropertyChanged("BlockOnStage");
				}
			}
		}
		
		private DictItem _dictItem1;
		[ForeignKeyAssociation(ConstraintName = "task_dependency_dict_item_FK_block_on_state_id", SharedFields = "BlockOnStateId", TargetFields = "Id")]
		[Storage("_dictItem1")]
		public virtual DictItem BlockOnState
		{
			get
			{
				return this._dictItem1;
			}
			set
			{
				if(this._dictItem1 != value)
				{
					this.OnPropertyChanging("BlockOnState");
					this._dictItem1 = value;
					this.OnPropertyChanged("BlockOnState");
				}
			}
		}
		
		private DictItem _dictItem2;
		[ForeignKeyAssociation(ConstraintName = "task_dependency_dict_item_FK_dependent_stage_id", SharedFields = "DependentStageId", TargetFields = "Id")]
		[Storage("_dictItem2")]
		public virtual DictItem DependentStage
		{
			get
			{
				return this._dictItem2;
			}
			set
			{
				if(this._dictItem2 != value)
				{
					this.OnPropertyChanging("DependentStage");
					this._dictItem2 = value;
					this.OnPropertyChanged("DependentStage");
				}
			}
		}
		
		private DictItem _dictItem3;
		[ForeignKeyAssociation(ConstraintName = "task_dependency_dict_item_FK_dependent_state_id", SharedFields = "DependentStateId", TargetFields = "Id")]
		[Storage("_dictItem3")]
		public virtual DictItem DependentState
		{
			get
			{
				return this._dictItem3;
			}
			set
			{
				if(this._dictItem3 != value)
				{
					this.OnPropertyChanging("DependentState");
					this._dictItem3 = value;
					this.OnPropertyChanged("DependentState");
				}
			}
		}
		
		private Task _task;
		[ForeignKeyAssociation(ConstraintName = "task_dependency_task_FK_task_dependent_id", SharedFields = "TaskDependentId", TargetFields = "Id")]
		[Storage("_task")]
		public virtual Task Task
		{
			get
			{
				return this._task;
			}
			set
			{
				if(this._task != value)
				{
					this.OnPropertyChanging("Task");
					this._task = value;
					this.OnPropertyChanged("Task");
				}
			}
		}
		
		private Task _task1;
		[ForeignKeyAssociation(ConstraintName = "task_dependency_task_FK_task_id", SharedFields = "TaskId", TargetFields = "Id")]
		[Storage("_task1")]
		public virtual Task DependentTask
		{
			get
			{
				return this._task1;
			}
			set
			{
				if(this._task1 != value)
				{
					this.OnPropertyChanging("DependentTask");
					this._task1 = value;
					this.OnPropertyChanged("DependentTask");
				}
			}
		}
		
		private User _user;
		[ForeignKeyAssociation(ConstraintName = "task_dependency_users_FK_created_by", SharedFields = "CreatedById", TargetFields = "Id")]
		[Storage("_user")]
		public virtual User CreatedBy
		{
			get
			{
				return this._user;
			}
			set
			{
				if(this._user != value)
				{
					this.OnPropertyChanging("CreatedBy");
					this._user = value;
					this.OnPropertyChanged("CreatedBy");
				}
			}
		}
		
		#region INotifyPropertyChanging members
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanging(string propertyName)
		{
			if(this.PropertyChanging != null)
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
