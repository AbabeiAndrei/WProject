#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using WProject.DataAccess;

namespace WProject.DataAccess	
{
	[Table("user_in_group")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class UserInGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		private int _id;
		[Column("id", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_id")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual int Id
		{
			get
			{
				return this._id;
			}
			set
			{
				if(this._id != value)
				{
					this.OnPropertyChanging("Id");
					this._id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}
		
		private int _userId;
		[Column("user_id", OpenAccessType = OpenAccessType.Int32, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_userId")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual int UserId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if(this._userId != value)
				{
					this.OnPropertyChanging("UserId");
					this._userId = value;
					this.OnPropertyChanged("UserId");
				}
			}
		}
		
		private int _groupId;
		[Column("group_id", OpenAccessType = OpenAccessType.Int32, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_groupId")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual int GroupId
		{
			get
			{
				return this._groupId;
			}
			set
			{
				if(this._groupId != value)
				{
					this.OnPropertyChanging("GroupId");
					this._groupId = value;
					this.OnPropertyChanged("GroupId");
				}
			}
		}
		
		private DateTime _added;
		[Column("added", OpenAccessType = OpenAccessType.DateTime, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_added")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime Added
		{
			get
			{
				return this._added;
			}
			set
			{
				if(this._added != value)
				{
					this.OnPropertyChanging("Added");
					this._added = value;
					this.OnPropertyChanged("Added");
				}
			}
		}
		
		private int? _addedById;
		[Column("added_by", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_addedById")]
		public virtual int? AddedById
		{
			get
			{
				return this._addedById;
			}
			set
			{
				if(this._addedById != value)
				{
					this.OnPropertyChanging("AddedById");
					this._addedById = value;
					this.OnPropertyChanged("AddedById");
				}
			}
		}
		
		private string _comments;
		[Column("comments", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_comments")]
		public virtual string Comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				if(this._comments != value)
				{
					this.OnPropertyChanging("Comments");
					this._comments = value;
					this.OnPropertyChanged("Comments");
				}
			}
		}
		
		private string _metadata;
		[Column("metadata", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_metadata")]
		public virtual string Metadata
		{
			get
			{
				return this._metadata;
			}
			set
			{
				if(this._metadata != value)
				{
					this.OnPropertyChanging("Metadata");
					this._metadata = value;
					this.OnPropertyChanged("Metadata");
				}
			}
		}
		
		private short? _deleted;
		[Column("deleted", OpenAccessType = OpenAccessType.Byte, IsNullable = true, Length = 0, Scale = 0, SqlType = "tinyint")]
		[Storage("_deleted")]
		public virtual short? Deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if(this._deleted != value)
				{
					this.OnPropertyChanging("Deleted");
					this._deleted = value;
					this.OnPropertyChanged("Deleted");
				}
			}
		}
		
		private User _user;
		[ForeignKeyAssociation(ConstraintName = "user_in_group_user_FK_added_by", SharedFields = "AddedById", TargetFields = "Id")]
		[Storage("_user")]
		public virtual User AddedBy
		{
			get
			{
				return this._user;
			}
			set
			{
				if(this._user != value)
				{
					this.OnPropertyChanging("AddedBy");
					this._user = value;
					this.OnPropertyChanged("AddedBy");
				}
			}
		}
		
		private Group _group;
		[ForeignKeyAssociation(ConstraintName = "user_in_group_user_FK_group_id", SharedFields = "GroupId", TargetFields = "Id")]
		[Storage("_group")]
		public virtual Group Group
		{
			get
			{
				return this._group;
			}
			set
			{
				if(this._group != value)
				{
					this.OnPropertyChanging("Group");
					this._group = value;
					this.OnPropertyChanged("Group");
				}
			}
		}
		
		private User _user1;
		[ForeignKeyAssociation(ConstraintName = "user_in_group_user_FK_user_id", SharedFields = "UserId", TargetFields = "Id")]
		[Storage("_user1")]
		public virtual User User
		{
			get
			{
				return this._user1;
			}
			set
			{
				if(this._user1 != value)
				{
					this.OnPropertyChanging("User");
					this._user1 = value;
					this.OnPropertyChanged("User");
				}
			}
		}
		
		#region INotifyPropertyChanging members
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanging(string propertyName)
		{
			if(this.PropertyChanging != null)
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
